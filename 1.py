import os
import logging
from datetime import time, datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("script_bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7825529193:AAH06S3J0b5NhvxqXI8UK7vte-HTddsC7vc"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
YOUR_USERNAME = "lkji33"  # –í–∞—à Telegram username (–±–µ–∑ @)
SCRIPT_PATHS = {
    "morning": "goodmorning.py",
    "day": "1.py",
    "night": "goodnight.py",
}

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
SCHEDULE = {
    "morning": time(7, 0),  # 7:00
    "day": time(20, 0),     # 20:00
    "night": time(23, 0),   # 23:00
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
KEYBOARD = ReplyKeyboardMarkup(
    [["‚òÄ –£—Ç—Ä–æ", "üåÜ –î–µ–Ω—å", "üåô –ù–æ—á—å"]],
    resize_keyboard=True,
    one_time_keyboard=False
)

def run_script(script_name: str) -> dict:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    result = {
        "success": False,
        "output": "",
        "error": "",
        "script": script_name,
        "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "filename": SCRIPT_PATHS.get(script_name, "unknown"),
    }

    if script_name not in SCRIPT_PATHS:
        result["error"] = "–°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        return result

    script_path = SCRIPT_PATHS[script_name]
    if not os.path.exists(script_path):
        result["error"] = f"–§–∞–π–ª {script_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return result

    try:
        process = subprocess.run(
            ["python", script_path],
            capture_output=True,
            text=True,
            check=True
        )
        result.update({
            "output": process.stdout.strip(),
            "error": process.stderr.strip(),
            "success": True
        })
    except subprocess.CalledProcessError as e:
        result.update({
            "output": e.stdout.strip(),
            "error": e.stderr.strip(),
            "success": False
        })
    except Exception as e:
        result["error"] = str(e)

    return result

async def send_log_to_user(update: Update, result: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result["success"] else "‚ùå –û–®–ò–ë–ö–ê"
        message = (
            f"üïí –í—Ä–µ–º—è: {result['time']}\n"
            f"üìú –°–∫—Ä–∏–ø—Ç: {result['script']} ({result['filename']})\n"
            f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n"
        )

        if result["output"]:
            message += f"\nüìù –í—ã–≤–æ–¥:\n{result['output']}\n"
        if result["error"]:
            message += f"\n‚ö† –û—à–∏–±–∫–∏:\n{result['error']}\n"

        await update.message.reply_text(message, reply_markup=KEYBOARD)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def callback_morning(context: ContextTypes.DEFAULT_TYPE):
    """–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–∫—Ä–∏–ø—Ç"""
    result = run_script("morning")
    await send_log_to_user(context.job, result)

async def callback_day(context: ContextTypes.DEFAULT_TYPE):
    """–î–Ω–µ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç"""
    result = run_script("day")
    await send_log_to_user(context.job, result)

async def callback_night(context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—á–µ—Ä–Ω–∏–π —Å–∫—Ä–∏–ø—Ç"""
    result = run_script("night")
    await send_log_to_user(context.job, result)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    if update.effective_user.username != YOUR_USERNAME:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
    for job in context.job_queue.jobs():
        job.schedule_removal()

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
    context.job_queue.run_daily(callback_morning, time=SCHEDULE["morning"])
    context.job_queue.run_daily(callback_day, time=SCHEDULE["day"])
    context.job_queue.run_daily(callback_night, time=SCHEDULE["night"])

    await update.message.reply_text(
        "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        f"‚òÄ –£—Ç—Ä–æ 07:00 - goodmorning.py\n"
        f"üåÜ –î–µ–Ω—å 20:00 - 1.py\n"
        f"üåô –ù–æ—á—å 23:00 - goodnight.py\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤:",
        reply_markup=KEYBOARD
    )

async def manual_run(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    if update.effective_user.username != YOUR_USERNAME:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /run <morning|day|night>")
        return

    script_name = context.args[0].lower()
    if script_name not in SCRIPT_PATHS:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: morning, day, night")
        return

    await update.message.reply_text(f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é {script_name}...")
    result = run_script(script_name)
    await send_log_to_user(update, result)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    if update.effective_user.username != YOUR_USERNAME:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    text = update.message.text
    script_map = {
        "‚òÄ –£—Ç—Ä–æ": "morning",
        "üåÜ –î–µ–Ω—å": "day",
        "üåô –ù–æ—á—å": "night"
    }

    if text not in script_map:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤")
        return

    script_name = script_map[text]
    await update.message.reply_text(f"‚è≥ –ó–∞–ø—É—Å–∫–∞—é {script_name} —Å–∫—Ä–∏–ø—Ç...")
    result = run_script(script_name)
    await send_log_to_user(update, result)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and isinstance(update, Update):
        if update.effective_user.username == YOUR_USERNAME:
            await update.message.reply_text(
                f"‚ö† –û—à–∏–±–∫–∞: {context.error}",
                reply_markup=KEYBOARD
            )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        application = Application.builder().token(TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("run", manual_run))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, button_handler))
        application.add_error_handler(error_handler)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    main()
