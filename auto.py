import os
import sys
import time
import logging
import asyncio
from datetime import datetime, timedelta
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7825529193:AAEIIA_IrpWM4bb1EGqAWrBxJABlZKko7sE"
CHAT_ID = 1111041097
ADMIN_ID = 1111041097  # –í–∞—à username –∏–ª–∏ ID
POST_SCHEDULE = {
    "morning": {"time": "07:00", "script": "goodmorning.py", "max_retries": 3},
    "day": {"time": "20:30", "script": "1.py", "max_retries": 3},
    "night": {"time": "23:00", "script": "goodnight.py", "max_retries": 3}
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

class PostBot:
    def __init__(self):
        self.bot = Bot(TOKEN)
        self.retry_counts = {name: 0 for name in POST_SCHEDULE}

    async def send_alert(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É"""
        try:
            await self.bot.send_message(ADMIN_ID, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def run_script(self, script_name: str) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ—Å—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            result = await asyncio.create_subprocess_exec(
                "python", script_name,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await result.communicate()
            
            if result.returncode != 0:
                raise Exception(stderr.decode().strip())
                
            logger.info(f"–°–∫—Ä–∏–ø—Ç {script_name} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ {script_name}: {e}")
            await self.send_alert(f"‚ùå –û—à–∏–±–∫–∞ –≤ {script_name}:\n{e}")
            return False

    async def scheduled_post(self, post_name: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        post = POST_SCHEDULE[post_name]
        self.retry_counts[post_name] = 0
        
        while self.retry_counts[post_name] < post["max_retries"]:
            if await self.run_script(post["script"]):
                await self.send_alert(f"‚úÖ –ü–æ—Å—Ç {post_name} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                return
                
            self.retry_counts[post_name] += 1
            if self.retry_counts[post_name] < post["max_retries"]:
                await self.send_alert(f"‚ôªÔ∏è –ü–æ–ø—ã—Ç–∫–∞ {self.retry_counts[post_name]}/{post['max_retries']}...")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        await self.send_alert(f"üö® –ü–æ—Å—Ç {post_name} –ù–ï –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ {post['max_retries']} –ø–æ–ø—ã—Ç–æ–∫!")

    async def check_schedule(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        now = datetime.now().strftime("%H:%M")
        for name, post in POST_SCHEDULE.items():
            if now == post["time"]:
                await self.scheduled_post(name)

    async def show_posts_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("–£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç", callback_data='morning')],
            [InlineKeyboardButton("–î–Ω–µ–≤–Ω–æ–π –ø–æ—Å—Ç", callback_data='day')],
            [InlineKeyboardButton("–ù–æ—á–Ω–æ–π –ø–æ—Å—Ç", callback_data='night')],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='status')],
            [InlineKeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞", callback_data='restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=reply_markup)

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data in POST_SCHEDULE:
            await query.edit_message_text(text=f"üîÑ –ó–∞–ø—É—Å–∫–∞—é {query.data} –ø–æ—Å—Ç...")
            await self.scheduled_post(query.data)
        elif query.data == 'status':
            status = "\n".join([f"{name}: {count} –ø–æ–ø—ã—Ç–æ–∫" for name, count in self.retry_counts.items()])
            await query.edit_message_text(text=f"üìä –°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–æ–≤:\n{status}")
        elif query.data == 'restart':
            await query.edit_message_text(text="üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            os.execv(sys.executable, ['python'] + sys.argv)
        else:
            await query.edit_message_text(text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    async def restart_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Telegram"""
        await update.message.reply_text("üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        os.execv(sys.executable, ['python'] + sys.argv)

    async def on_error(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
        error = str(context.error)
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error}")
        await self.send_alert(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{error}\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
        await asyncio.sleep(300)
        os.execv(sys.executable, ['python'] + sys.argv)

async def main():
    bot = PostBot()
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", bot.show_posts_menu))
    app.add_handler(CommandHandler("restart", bot.restart_command))
    app.add_handler(CommandHandler("posts", bot.show_posts_menu))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(bot.button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(bot.on_error)
    
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job_queue = app.job_queue
    job_queue.run_repeating(bot.check_schedule, interval=60.0)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    await bot.send_alert("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ 24/7!")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
